{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","btn","AllBtns","document","getElementsByClassName","style","fontWeight","allSqrs","color","step","e","target","boldBtn","unSqrColor","status","current","winner","moves","map","move","desc","jumpTo","handleClick","lines","a","b","c","winComp","num","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.d2cc533e.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n\r\nfunction Square(props) { // render function for single square \r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      {props.value} \r\n    </button>\r\n  )\r\n};\r\n\r\nclass Board extends React.Component {\r\n    renderSquare(i) {\r\n      return (\r\n        <Square\r\n          value={this.props.squares[i]}\r\n          onClick={() => this.props.onClick(i)}\r\n        />\r\n      );\r\n    };\r\n  \r\n  render() { // render game squares \r\n    return (\r\n      <div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  } \r\n   \r\n  } // Board END\r\n\r\nclass Game extends React.Component { // main game class\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [\r\n        {\r\n          squares: Array(9).fill(null)\r\n        }\r\n      ],\r\n      stepNumber: 0,\r\n      xIsNext: true\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\"; \r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares\r\n        }\r\n      ]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext\r\n    });\r\n  };\r\n \r\n  boldBtn(btn) { // change fontWeight of clicked button\r\n    let AllBtns = document.getElementsByClassName('btn')\r\n    for (let i = 0; i < AllBtns.length; i ++) {\r\n      AllBtns[i].style.fontWeight = 'normal'\r\n    }\r\n    btn.style.fontWeight = 'bold'\r\n  };\r\n\r\n  unSqrColor() { // change color of all squares if user back to previous move\r\n    let allSqrs = document.getElementsByClassName('square')\r\n    for (const simplsq of allSqrs) {\r\n      simplsq.style.color = 'black'\r\n    }\r\n  }\r\n\r\n  jumpTo(step, e) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0\r\n    });\r\n    let btn = e.target\r\n    this.boldBtn(btn)\r\n    this.unSqrColor()\r\n  };\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n    const moves = history.map((step, move) => { \r\n    const desc = move ?\r\n        'Go to move #' + move :\r\n        'Go to game start';\r\n      return (\r\n        <li key={move}>\r\n          <button className=\"btn\" onClick={(e) => this.jumpTo(move, e)}>{desc}</button>\r\n        </li>\r\n      );\r\n    });// end of moves\r\n    \r\n    let status;\r\n    if (winner) {\r\n      status = \"Winner: \" + winner;\r\n    } else if (winner === null && moves.length === 10) {\r\n      status = 'REMIS'\r\n    } else {\r\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n    }\r\n   \r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            onClick={i => this.handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}; // end of render\r\n\r\nfunction calculateWinner(squares) { // Check for winning combination \r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) { \r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n    let winComp = lines[i] \r\n    for (const num of winComp) {\r\n      let sqrbtn = document.getElementsByClassName('square')\r\n      sqrbtn[num].style.color = 'red'\r\n    }\r\n      return squares[a];\r\n  }\r\n  }\r\n  return null;\r\n};\r\n\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n\r\n"],"sourceRoot":""}